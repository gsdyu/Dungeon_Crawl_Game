"""
This program simulates a game where a hero travels through a dungeon until
they find the exit to win. They will fight through variety of monsters and
they can heal from item rooms containing a potion. The map class  
"""
import hero
import beg_factory
import exp_factory
import map
import check_input
import random

def main():
    '''Deals with the user interface of the game: getting the name for the hero
    traveling through the dungeon, getting the difficulty of the monsters, fighting the monster if exist, continuing to the next level
    after finding the exit, ending the game when the hero dies.'''
    print("\nStarting Dungeon Crawl Game...\n\nA Mysterious yet Brave Hero ventures into a Cryptic Dungeon crawling with Evil Monsters...\n")
    name = input("Enter the name of your Hero: ")
    diff = check_input.get_int_range("\nEnter the Difficulty of your Dungeon:\n1.Beginner\n2.Expert\nEnter Choice: ",1, 2)
    if diff == 1:
        factory = beg_factory.BeginnerFactory()
        pass
    elif diff == 2:
        factory = exp_factory.ExpertFactory()
    m = map.Map()
    mcount = 0
    h = hero.Hero(name)
    m.reveal(h.get_loc())
    print("\nInstructions: The following will show your hero's stats and your map. * will be your current location. x are unexplored area that will become discovered once you travel to them. Uncover the mysteries that lies on that x and find the exit that leads to the next floor.")
    while h.get_hp() > 0:
        print()
        print(h)
        print(m.show_map(h.get_loc()))
        print("Where do you want your hero to go?")
        choice = check_input.get_int_range('\n1. Go North\n2. Go South\n3. Go East\n4. Go West\n5. Quit\nEnter choice: ', 1, 5)
        if choice == 5:
            break
        if choice == 1:
            move = h.go_north()
        elif choice == 2:
            move = h.go_south()
        elif choice == 3:
            move = h.go_east()
        elif choice == 4:
            move = h.go_west()
        if move == 'x':
            print('You cannot go that way...')
            continue
        print(m.show_map(move))
        m.reveal(h.get_loc())
        if m[h.get_loc()[0]][h.get_loc()[1]] == 'm':
            monster = factory.create_random_enemy()
            print(f'You encounter a {monster}! How does the hero deal with this?')
            while monster.get_hp() > 0:
                print("\nCombat Start:")
                print(f"\n{h}")
                print(f"\n{monster}\n")
                print("Choices:")
                fight = check_input.get_int_range(f'1. Attack {monster.get_name()}\n2. Run Away\nEnter choice: ',1, 2)
                if fight == 1:
                    print(h.attack(monster))
                    if monster.get_hp() == 0:
                        print(f"{h.get_name()} have slain a {monster.get_name()}")
                        m.remove_at_loc(h.get_loc())
                        break
                    monster.attack(h)
                    if h.get_hp() == 0:
                        break
                elif fight == 2:
                    '''goes a random way if you try to run away from the fight/simulate getting lost and running off
                    in a random direction in a middle of a fight
                    
                    alternative way to run away is to go back the direction the user was before, which does not 
                    allow a potential cheese to constantly run away from all the fights in still being able to 
                    reach the exit since the user can technically explore the area with running away here

                    I decided not to use this alternative way, since this simulation of running in a different 
                    direction seem more realistic of being lost. Also the cheese will be harder since theoretically
                    its entirely random, and hence unreliable to completing the game.

                    This way will also allow users to get random potions if they are really low hp and cannot 
                    reliably fight monsters; running away and looking for potions gives an alternative option
                    for low hp users beside just starting over to get their hp back.

                    To add on about the potions ^^, fighting also has no counterplay. The only option besides 
                    running for low hp users is to just startover or lose.
                    '''
                    while True:

                        rint = random.randint(1,4)
                        direction = ["North","South","East","West"]
                        if rint == 1:
                            ran = h.go_north()
                        elif rint == 2:
                            ran = h.go_south()
                        elif rint == 3:
                            ran = h.go_east()
                        elif rint == 4:
                            ran = h.go_west()
                        if ran != 'x':
                            print(f"\nYou ran away from the {monster.get_name()} and got lost.\nYou found yourself {direction[rint-1]} from where the {monster.get_name()} was.")
                            m.reveal(h.get_loc())
                            break
                    break
            continue
        if m[h.get_loc()[0]][h.get_loc()[1]] == 'n':
            print("The room is empty.")
            continue
        if m[h.get_loc()[0]][h.get_loc()[1]] == 's':
            print("You landed back where you started")
            continue
        if m[h.get_loc()[0]][h.get_loc()[1]] == 'i':
            print("You found a health potion.")
            if h.get_hp() == h.get_max_hp():
                print("You are already max health.")
                continue
            h.heal()
            m.remove_at_loc(h.get_loc())
            print(f"{h.get_name()} healed to full health.")
            continue
        if m[h.get_loc()[0]][h.get_loc()[1]] == 'f':
            print(f'Congratulation! {h.get_name()} found the entrance to the next level!')
            mcount += 1
            mcount = mcount
            m.load_map(mcount)
            m.reveal(h.get_loc())
    print("Game Over")

main()
